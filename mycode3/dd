#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Compute kBET (k-nearest neighbor batch effect test) in Python using rpy2.
No anndata2ri.activate() required.
"""

import numpy as np
import pandas as pd
import scanpy as sc
import logging
import rpy2.robjects as ro
from rpy2.robjects import numpy2ri, pandas2ri
import rpy2.rinterface_lib.callbacks
import rpy2.rinterface_lib.embedded

rpy2.rinterface_lib.callbacks.logger.setLevel(logging.ERROR)

# Try loading R library
try:
    ro.r("library(kBET)")
except rpy2.rinterface_lib.embedded.RRuntimeError:
    raise ImportError("R package 'kBET' is not installed. Please install it in R: install.packages('kBET')")


# -----------------------------
# Core function: single run
# -----------------------------
def kBET_single(matrix, batch, k0=10, knn=None, verbose=False):
    """
    Run a single kBET test using R backend.
    No global conversion (no anndata2ri.activate()).

    Parameters
    ----------
    matrix : np.ndarray
        Low-dimensional embedding (cells × features)
    batch : list, np.ndarray, or pd.Series
        Batch labels for each cell
    k0 : int
        Number of nearest neighbors
    knn : np.ndarray, optional
        Precomputed KNN graph (indices)
    verbose : bool
        Print detailed messages

    Returns
    -------
    float : kBET rejection rate (lower = better mixing)
    """
    # --- convert to R objects manually ---
    r_matrix = numpy2ri.py2rpy(matrix)
    if isinstance(batch, (pd.Series, pd.Categorical)):
        batch = batch.astype(str)
    r_batch = pandas2ri.py2rpy(pd.DataFrame({"batch": batch}))["batch"]
    r_knn = numpy2ri.py2rpy(knn.astype(float)) if knn is not None else ro.NULL
    r_k0 = ro.IntVector([k0])

    ro.globalenv["data_mtrx"] = r_matrix
    ro.globalenv["batch"] = r_batch
    ro.globalenv["knn_graph"] = r_knn
    ro.globalenv["k0"] = r_k0

    if verbose:
        print("Running kBET in R...")

    ro.r(
        "batch.estimate <- kBET("
        "  data_mtrx, batch,"
        "  knn=knn_graph, k0=k0,"
        "  plot=FALSE, do.pca=FALSE,"
        "  heuristic=FALSE, adapt=FALSE,"
        f"  verbose={str(verbose).upper()}"
        ")"
    )

    try:
        score = float(ro.r("batch.estimate$summary$kBET.observed")[0])
    except Exception as ex:
        print(f"[Warning] Error computing kBET: {ex}")
        score = np.nan

    return score


# -----------------------------
# Wrapper for AnnData
# -----------------------------
def kBET(
    adata,
    batch_key="batch",
    embed="X_pca",
    n_neighbors=10,
    subsample=None,
    verbose=False,
):
    """
    Compute kBET metric for an AnnData object.

    Parameters
    ----------
    adata : anndata.AnnData
        AnnData object with embeddings.
    batch_key : str
        Column in adata.obs indicating batch labels.
    embed : str
        Key in adata.obsm containing the embedding matrix.
    n_neighbors : int
        kBET parameter k0 (number of nearest neighbors).
    subsample : int, optional
        Number of cells to randomly subsample.
    verbose : bool
        Print detailed progress.

    Returns
    -------
    float : kBET rejection rate
    """
    from sklearn.neighbors import NearestNeighbors

    if embed in adata.obsm:
        matrix = np.asarray(adata.obsm[embed])
    else:
        matrix = np.asarray(adata.X)

    if subsample is not None and subsample < matrix.shape[0]:
        idx = np.random.choice(matrix.shape[0], subsample, replace=False)
        matrix = matrix[idx]
        adata_sub = adata[idx].copy()
    else:
        adata_sub = adata

    # Compute kNN
    nn = NearestNeighbors(n_neighbors=n_neighbors + 1, n_jobs=-1)
    nn.fit(matrix)
    nn_index = nn.kneighbors(return_distance=False)[:, 1:]  # exclude self

    # Run single kBET
    score = kBET_single(
        matrix=matrix,
        batch=adata_sub.obs[batch_key],
        knn=nn_index + 1,  # R is 1-indexed
        verbose=verbose,
        k0=n_neighbors,
    )

    if verbose:
        print(f"kBET (k={n_neighbors}): {score:.4f}")

    return score


# -----------------------------
# Example usage
# -----------------------------
if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description="Run kBET evaluation on an .h5ad file")
    parser.add_argument("--input", required=True, help="Path to input .h5ad file")
    parser.add_argument("--embed", default="X_pca", help="Embedding key in adata.obsm")
    parser.add_argument("--batch_key", default="batch", help="Batch column in adata.obs")
    parser.add_argument("--neighbors", type=int, default=10, help="Number of nearest neighbors")
    parser.add_argument("--subsample", type=int, default=None, help="Optional subsample size")
    parser.add_argument("--verbose", action="store_true", help="Verbose output")
    args = parser.parse_args()

    adata = sc.read_h5ad(args.input)
    score = kBET(
        adata,
        batch_key=args.batch_key,
        embed=args.embed,
        n_neighbors=args.neighbors,
        subsample=args.subsample,
        verbose=args.verbose,
    )
    print(f"\n✅ kBET rejection rate: {score:.4f}")

